"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportTemplate = exports.inflateTemplate = exports.Template = exports.TemplateFile = void 0;
var globby = require("globby");
var path = require("path");
var promisify = require('promisify-any');
var fs = require("fs-extra");
var Handlebars = require("handlebars");
var chai_1 = require("chai");
var yargs_1 = require("yargs");
Handlebars.registerHelper('json', function (context) {
    return JSON.stringify(context, null, 4);
});
//
// Represents an expanded file in a template.
//
var TemplateFile = /** @class */ (function () {
    function TemplateFile(data, relativeFilePath, templateAssetsPath, allowExpand, fileContent) {
        this.data = data;
        this.relativePath = relativeFilePath;
        this.templateAssetsPath = templateAssetsPath;
        this.allowExpand = allowExpand;
        this.fileContent = fileContent;
    }
    /**
     * Get the pull path of the template file in the template assets directory.
     */
    TemplateFile.prototype.getFullPath = function () {
        return path.join(this.templateAssetsPath, this.relativePath);
    };
    //
    // Load the file's content into memory (if not already loaded).
    //
    TemplateFile.prototype.loadContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.fileContent) {
                            // Already loaded.
                            return [2 /*return*/, this.fileContent];
                        }
                        _a = this;
                        return [4 /*yield*/, promisify(fs.readFile)(this.getFullPath())];
                    case 1:
                        _a.fileContent = _b.sent();
                        return [2 /*return*/, this.fileContent];
                }
            });
        });
    };
    /**
     * Expand the files content filling in gaps with data.
     */
    TemplateFile.prototype.expand = function () {
        return __awaiter(this, void 0, void 0, function () {
            var fileContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.expandedContent) {
                            // Content already expanded.
                            return [2 /*return*/, this.expandedContent];
                        }
                        return [4 /*yield*/, this.loadContent()];
                    case 1:
                        fileContent = _a.sent();
                        if (this.allowExpand) {
                            try {
                                this.expandedContent = new Buffer(Handlebars.compile(fileContent.toString())(this.data));
                            }
                            catch (err) {
                                throw new Error("Error compiling template file '" + this.getFullPath() + "'.\r\n" + (err && err.stack || err));
                            }
                        }
                        else {
                            this.expandedContent = fileContent;
                        }
                        return [2 /*return*/, this.expandedContent];
                }
            });
        });
    };
    /**
     * Expand and output the file to the output path.
     *
     * @param outputPath The path to output the file to.
     */
    TemplateFile.prototype.export = function (outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fullOutputPath, expandedContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fullOutputPath = path.join(outputPath, this.relativePath);
                        return [4 /*yield*/, fs.ensureDir(path.dirname(fullOutputPath))];
                    case 1:
                        _a.sent();
                        if (!!this.allowExpand) return [3 /*break*/, 3];
                        if (options === null || options === void 0 ? void 0 : options.verbose) {
                            console.log("Copying " + this.getFullPath() + " to " + fullOutputPath + ".");
                        }
                        // If not expanding just copy the file.
                        return [4 /*yield*/, fs.copyFile(this.getFullPath(), fullOutputPath)];
                    case 2:
                        // If not expanding just copy the file.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3:
                        if (options === null || options === void 0 ? void 0 : options.verbose) {
                            console.log("Expanding " + this.getFullPath() + " to " + fullOutputPath + ".");
                        }
                        return [4 /*yield*/, this.expand()];
                    case 4:
                        expandedContent = _a.sent();
                        return [4 /*yield*/, promisify(fs.writeFile)(fullOutputPath, expandedContent)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return TemplateFile;
}());
exports.TemplateFile = TemplateFile;
//
// Represents an inflated template.
//
var Template = /** @class */ (function () {
    function Template(templatePath, data, options) {
        //
        // Files contained in the inflated template.
        //
        this.files = {};
        this.templatePath = templatePath;
        this.data = data;
        this.options = options;
    }
    //
    // Inflate files provided in memory.
    //
    Template.prototype.inflateInMemoryFiles = function (templateAssetsDirectoryPath) {
        var _this = this;
        return this.options && this.options.inMemoryFiles
            ? this.options.inMemoryFiles.map(function (inMemoryFile) {
                return new TemplateFile(_this.data, inMemoryFile.file, templateAssetsDirectoryPath, true, inMemoryFile.content);
            })
            : [];
    };
    //
    // Read the file system and determine the files in the template.
    //
    Template.prototype.readFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var templateDirectoryExists, assetsDirectoryName, templateAssetsDirectoryPath, templateAssetsDirectoryExists, templateConfigFilePath, templateConfigFileExists, expandWildcard, noExpandWildcard, templateConfigContent, templateConfig, expandWildcards, noExpandFileWildcards, templateFileWildcards, filesToInflate, allFiles, inMemoryFilesSet, _i, _a, inMemoryFile, _b, _c, inMemoryFile, _d, filesToInflate_1, templateFilePath, templateFile, _e, allFiles_1, templateFilePath, templateFile;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, fs.pathExists(this.templatePath)];
                    case 1:
                        templateDirectoryExists = _f.sent();
                        if (!templateDirectoryExists) {
                            throw new Error("Template path '" + this.templatePath + "' does not exist.");
                        }
                        assetsDirectoryName = "assets";
                        templateAssetsDirectoryPath = path.join(this.templatePath, assetsDirectoryName);
                        return [4 /*yield*/, fs.pathExists(templateAssetsDirectoryPath)];
                    case 2:
                        templateAssetsDirectoryExists = _f.sent();
                        if (!templateAssetsDirectoryExists) {
                            throw new Error("Expected template in '" + this.templatePath + "' to contain an '" + assetsDirectoryName + "' sub-directory that contains the templates files to be inflated..");
                        }
                        templateConfigFilePath = path.join(this.templatePath, "template.json");
                        return [4 /*yield*/, fs.pathExists(templateConfigFilePath)];
                    case 3:
                        templateConfigFileExists = _f.sent();
                        if (!templateConfigFileExists) return [3 /*break*/, 5];
                        return [4 /*yield*/, promisify(fs.readFile)(templateConfigFilePath, "utf8")];
                    case 4:
                        templateConfigContent = _f.sent();
                        templateConfig = JSON.parse(templateConfigContent);
                        if (templateConfig.expand) {
                            if (Array.isArray(templateConfig.expand)) {
                                expandWildcard = templateConfig.expand;
                            }
                            else {
                                expandWildcard = [templateConfig.expand];
                            }
                        }
                        else {
                            expandWildcard = ["**/*"];
                        }
                        if (templateConfig.noExpand) {
                            if (Array.isArray(templateConfig.noExpand)) {
                                noExpandWildcard = templateConfig.noExpand;
                            }
                            else {
                                noExpandWildcard = [templateConfig.noExpand];
                            }
                        }
                        else {
                            noExpandWildcard = [];
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        expandWildcard = ["**/*"];
                        noExpandWildcard = [];
                        _f.label = 6;
                    case 6:
                        expandWildcards = expandWildcard
                            .map(function (wildcard) {
                            return path.join(templateAssetsDirectoryPath, wildcard);
                        });
                        noExpandFileWildcards = noExpandWildcard
                            .map(function (wildcard) {
                            return path.join(templateAssetsDirectoryPath, wildcard);
                        });
                        templateFileWildcards = expandWildcards
                            .concat(noExpandFileWildcards
                            .map(function (wildcard) { return "!" + wildcard; }));
                        return [4 /*yield*/, globby(templateFileWildcards)];
                    case 7:
                        filesToInflate = _f.sent();
                        return [4 /*yield*/, globby(path.join(templateAssetsDirectoryPath, "**/*"))];
                    case 8:
                        allFiles = _f.sent();
                        inMemoryFilesSet = new Set();
                        if (this.options && this.options.inMemoryFiles) {
                            for (_i = 0, _a = this.options.inMemoryFiles; _i < _a.length; _i++) {
                                inMemoryFile = _a[_i];
                                inMemoryFilesSet.add(inMemoryFile.file);
                            }
                        }
                        for (_b = 0, _c = this.inflateInMemoryFiles(templateAssetsDirectoryPath); _b < _c.length; _b++) {
                            inMemoryFile = _c[_b];
                            this.files[inMemoryFile.relativePath] = inMemoryFile;
                        }
                        for (_d = 0, filesToInflate_1 = filesToInflate; _d < filesToInflate_1.length; _d++) {
                            templateFilePath = filesToInflate_1[_d];
                            templateFile = new TemplateFile(this.data, path.relative(templateAssetsDirectoryPath, templateFilePath), templateAssetsDirectoryPath, true);
                            if (!this.files[templateFile.relativePath]) {
                                this.files[templateFile.relativePath] = templateFile;
                            }
                        }
                        for (_e = 0, allFiles_1 = allFiles; _e < allFiles_1.length; _e++) {
                            templateFilePath = allFiles_1[_e];
                            templateFile = new TemplateFile(this.data, path.relative(templateAssetsDirectoryPath, templateFilePath), templateAssetsDirectoryPath, false);
                            if (!this.files[templateFile.relativePath]) {
                                this.files[templateFile.relativePath] = templateFile;
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Finds a file by name and returns it.
     * Returns null if the file doesn't exist.
     *
     * @param fileName Name of the file to find.
     */
    Template.prototype.find = function (fileName) {
        return this.files[fileName];
    };
    /**
     * Expand and export the template to a directory on disk.
     *
     * @param outputPath The path of the directory export the template to.
     */
    Template.prototype.export = function (outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, relativeFilePath, file;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = Object.keys(this.files);
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        relativeFilePath = _a[_i];
                        file = this.files[relativeFilePath];
                        return [4 /*yield*/, file.export(outputPath, options)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return Template;
}());
exports.Template = Template;
/**
 * Inflate a template in memory.
 *
 * @param templatePath The path to load the template from.
 * @param data The data to expand the template.
 * @param options Various options.
 *
 * @returns An inflated template.
 */
function inflateTemplate(templatePath, data, options) {
    return __awaiter(this, void 0, void 0, function () {
        var template;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    template = new Template(templatePath, data, options);
                    return [4 /*yield*/, template.readFiles()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, template];
            }
        });
    });
}
exports.inflateTemplate = inflateTemplate;
/**
 * Do a full export. Inflate the specified template with data and write all expanded files to the
 * specified output directory.
 *
 * @param templatePath The path to load the template from.
 * @param data The data to expand the template.
 * @param outputPath The path to output expanded files to.
 * @param options Various options.
 */
function exportTemplate(templatePath, data, outputPath, options) {
    return __awaiter(this, void 0, void 0, function () {
        var exists, template;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs.pathExists(outputPath)];
                case 1:
                    exists = _a.sent();
                    if (!exists) return [3 /*break*/, 5];
                    if (!(options && options.overwrite)) return [3 /*break*/, 4];
                    if (!options.clean) return [3 /*break*/, 3];
                    return [4 /*yield*/, fs.remove(outputPath)];
                case 2:
                    _a.sent(); // Overwrite and clean.
                    _a.label = 3;
                case 3: return [3 /*break*/, 5];
                case 4: throw new Error("Output path '" + outputPath + "' already exists."); // Export already exists.
                case 5: return [4 /*yield*/, fs.ensureDir(outputPath)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, inflateTemplate(templatePath, data, options)];
                case 7:
                    template = _a.sent();
                    return [4 /*yield*/, template.export(outputPath, options)];
                case 8:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.exportTemplate = exportTemplate;
// 
// Load test data from the template directory.
//
function loadTestData(templatePath) {
    return __awaiter(this, void 0, void 0, function () {
        var testDataFilePath, testDataExists, testDataFileContent, testData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testDataFilePath = path.join(templatePath, "test-data.json");
                    return [4 /*yield*/, fs.pathExists(testDataFilePath)];
                case 1:
                    testDataExists = _a.sent();
                    if (!testDataExists) {
                        throw new Error("To test your template you need a test-data.json in your template directory.");
                    }
                    return [4 /*yield*/, promisify(fs.readFile)(testDataFilePath, "utf8")];
                case 2:
                    testDataFileContent = _a.sent();
                    testData = JSON.parse(testDataFileContent);
                    return [2 /*return*/, testData];
            }
        });
    });
}
//
// Command line inflate and export a template.
//
function cli_export(templatePath, outputPath, overwrite) {
    return __awaiter(this, void 0, void 0, function () {
        var testData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadTestData(templatePath)];
                case 1:
                    testData = _a.sent();
                    return [4 /*yield*/, exportTemplate(templatePath, testData, outputPath, {
                            overwrite: overwrite,
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//
// Basic test run using the real file system.
//
function testRun() {
    return __awaiter(this, void 0, void 0, function () {
        var file1, file2, expectedContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, exportTemplate("test-template", {
                        msg: "Hello computer"
                    }, "test-output", {
                        overwrite: true,
                    })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, promisify(fs.readFile)(path.join("test-output", "test1.txt"), "utf8")];
                case 2:
                    file1 = _a.sent();
                    chai_1.assert(file1 === "MSG: Hello computer", "file1");
                    return [4 /*yield*/, promisify(fs.readFile)(path.join("test-output", "test2.html"), "utf8")];
                case 3:
                    file2 = _a.sent();
                    expectedContent = "<html>\r\n    <body>\r\n        Hello computer\r\n    </body>\r\n</html>";
                    chai_1.assert(file2 === expectedContent, "file2");
                    return [2 /*return*/];
            }
        });
    });
}
if (require.main === module) { // For command line testing.
    if (yargs_1.argv._.length === 0) {
        throw new Error("Expected a command of export");
    }
    var cmd = yargs_1.argv._[0];
    if (cmd === "test") {
        console.log("Test run...");
        testRun()
            .then(function () { return console.log("Done"); })
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else if (cmd === "export") {
        if (!yargs_1.argv.template) {
            throw new Error("Expected argument --template=<path-to-your-template>");
        }
        if (!yargs_1.argv.out) {
            throw new Error("Expected argument --out=<path-to-output-expanded-template>");
        }
        cli_export(yargs_1.argv.template, yargs_1.argv.out, !!yargs_1.argv.overwrite)
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else {
        throw new Error("Unknown command: " + cmd);
    }
}
//# sourceMappingURL=index.js.map